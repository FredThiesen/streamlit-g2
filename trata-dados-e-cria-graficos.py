# -*- coding: utf-8 -*-
"""Cópia de G1-NOTEBOOK-CIENCIADADOS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MzzIZpU1ZlTx5x_j2iBRWjqZFXG-nfXz
"""

# from google.colab import drive
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#drive.mount('/content/drive', force_remount=True)

#df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/datasets/ConsultasAmbulatoriais2023.csv', delimiter=';', encoding='latin-1', usecols=lambda c: not c.startswith('Unnamed'))
df = pd.read_csv('ConsultasAmbulatoriais2023.csv', delimiter=';', encoding='latin-1', usecols=lambda c: not c.startswith('Unnamed'))

df.head(6)

"""TRATAR OS DADOS"""

nullRows =  df[df.isnull().any(axis=1)]
#existem valores null no municipio, genero e idade

#16900 registro com municipio null
#24 registro com idade null
#4026 registros com sexo null

#iremos remover os registros com sexo null pois sao apenas 4026 e nao irá impactar no resultado final considerando que o dataset tem 200_000 registros
df = df[df['Sexo'].notnull()].copy()

#preencher os registros com municipio null = não informado
df['Município'] = df['Município'].fillna('Não informado')

#preencher os registros com idade null com a media por sexo
media_idade_por_sexo = df.groupby('Sexo')['Idade'].transform('mean')
df['Idade'] = df['Idade'].fillna(media_idade_por_sexo)

#criar coluna mes / dia da semana
df['Data/Hora_ Consulta Ambulatorial'] = pd.to_datetime(df['Data/Hora_ Consulta Ambulatorial'], dayfirst=True)
df['Mes'] = df['Data/Hora_ Consulta Ambulatorial'].dt.month
df['Dia_Semana'] = df['Data/Hora_ Consulta Ambulatorial'].dt.day_name()

"""GRAFICOS"""

# DISTRIBUICAO DE PACIENTES POR SEXO
sns.set(style="whitegrid")
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='Sexo', palette='pastel')
plt.title('Distribuição de Pacientes por Sexo')
plt.xlabel('Sexo')
plt.ylabel('Contagem')
plt.tight_layout()
plt.show()

#DISTRIBUIÇÃO DE IDADE DE PACIENTES MULHERES


plt.figure(figsize=(20, 6))
sns.histplot(data=df[df['Sexo'] == 'FEMININO'], x='Idade', bins=30, kde=True, color='pink')
plt.title('Distribuição de Idade dos Pacientes')
plt.xlabel('Idade')
plt.ylabel('Atendimentos')
plt.tight_layout()
plt.show()

#DISTRIBUIÇÃO DE IDADE DE PACIENTES HOMENS

plt.figure(figsize=(20, 6))
sns.histplot(data=df[df['Sexo'] == 'MASCULINO'], x='Idade', bins=30, kde=True, color='skyblue')
plt.title('Distribuição de Idade dos Pacientes')
plt.xlabel('Idade')
plt.ylabel('Atendimentos')
plt.tight_layout()
plt.show()

consultas_por_data = df.groupby('Dia_Semana').size()

plt.figure(figsize=(14, 6))
consultas_por_data.plot(color='dodgerblue')
plt.title('Tendência de Atendimentos na Semana')
plt.xlabel('Dia da Semana')
plt.ylabel('Número de Atendimentos')
plt.grid(True)
plt.tight_layout()
plt.show()

df_filtrado = df[df['Município'] != 'Não informado']
top_municipios = df_filtrado['Município'].value_counts().head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x=top_municipios.values, y=top_municipios.index, palette='flare')
plt.title('Top 10 Municípios com Mais Atendimentos')
plt.xlabel('Contagem')
plt.ylabel('Município')
plt.tight_layout()
plt.show()

#teste com dataset hardcore


# Criando o DataFrame manualmente
dados = {
    'Data/Hora_ Consulta Ambulatorial': [
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
        '02/01/2023 07:00',
    ],
    'Especialidade': [
        'PSIQUIATRIA PEDIATRICA',
        'PSIQUIATRIA PEDIATRICA',
        'PSIQUIATRIA PEDIATRICA',
        'PSIQUIATRIA PEDIATRICA',
        'NEUROLOGIA',
        'NEUROLOGIA',
        'NEUROLOGIA',
        'NEUROLOGIA',
        'NEUROLOGIA',
    ],
    'Município': [
        'NATAL',
        'SÃO TOMÉ',
        'TANGARÁ',
        'NATAL',
        'NÍSIA FLORESTA',
        None,  # Município ausente
        'JAPI',
        'RIACHUELO',
        'CRUZETA',
    ],
    'Idade': [
        14,
        None,
        17,
        16,
        28,
        33,
        36,
        53,
        None,
    ],
    'Sexo': [
        'FEMININO',
        'MASCULINO',
        'MASCULINO',
        'FEMININO',
        'MASCULINO',
        'FEMININO',
        'FEMININO',
        'FEMININO',
        'FEMININO',
    ]
}

dfHard = pd.DataFrame(dados)

print(dfHard)
#testando calculo da media
media_idade_por_sexo = dfHard.groupby('Sexo')['Idade'].transform('mean')
dfHard['Idade'] = dfHard['Idade'].fillna(media_idade_por_sexo)
print(dfHard)

"""# Cruzando mais dados para obter insights

1. Boxplot – Idade por Especialidade (Top 5)
Gráfico que mostra a variação da idade dos pacientes atendidos em cada uma das 5 especialidades mais populares. Os retângulos representam a mediana e a dispersão dos dados, enquanto os pontos fora do padrão indicam possíveis outliers.
"""

top_especialidades = df['Especialidade'].value_counts().head(5).index

plt.figure(figsize=(14, 6))
sns.boxplot(data=df[df['Especialidade'].isin(top_especialidades)],
            x='Especialidade', y='Idade')
plt.title('Distribuição de Idade por Especialidade (Top 5)')
plt.xlabel('Especialidade')
plt.ylabel('Idade')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""2. Countplot – Distribuição de Especialidades por Sexo (Top 5)
Comparação entre o número de atendimentos por sexo nas 5 especialidades com mais registros. Permite identificar tendências de especialidades mais buscadas por homens ou mulheres.
"""

plt.figure(figsize=(14, 6))
sns.countplot(data=df[df['Especialidade'].isin(top_especialidades)],
              x='Especialidade', hue='Sexo')
plt.title('Distribuição de Especialidades por Sexo')
plt.xlabel('Especialidade')
plt.ylabel('Número de Atendimentos')
plt.xticks(rotation=45)
plt.legend(title='Sexo')
plt.tight_layout()
plt.show()

"""3. Lineplot – Atendimentos por Mês
Linha do tempo que mostra o volume de atendimentos ambulatoriais ao longo dos meses de 2023. É útil para identificar padrões sazonais e picos de demanda.
"""

consultas_por_mes = df['Mes'].value_counts().sort_index()

plt.figure(figsize=(10, 5))
sns.lineplot(x=consultas_por_mes.index, y=consultas_por_mes.values, marker='o')
plt.title('Tendência de Atendimentos por Mês')
plt.xlabel('Mês')
plt.ylabel('Consultas')
plt.grid(True)
plt.tight_layout()
plt.show()

"""4. Barplot – Idade Média por Município (Top 5)
Média de idade dos pacientes atendidos nos 5 municípios com mais atendimentos. Fornece uma visão demográfica regional dos usuários do serviço de saúde.
"""

top5_municipios = df['Município'].value_counts().head(5).index

plt.figure(figsize=(10, 5))
df[df['Município'].isin(top5_municipios)].groupby('Município')['Idade'].mean().plot(kind='bar', color='slateblue')
plt.title('Idade Média dos Pacientes por Município (Top 5)')
plt.xlabel('Município')
plt.ylabel('Idade Média')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""5. Histograma – Distribuição Geral de Idades
Gráfico de frequência que mostra como a idade dos pacientes está distribuída no dataset completo. A curva KDE sobreposta ajuda a identificar concentrações e tendência central.
"""

plt.figure(figsize=(14, 6))
sns.histplot(data=df, x='Idade', bins=30, kde=True, color='mediumseagreen')
plt.title('Distribuição Geral de Atendimentos por Idade')
plt.xlabel('Idade')
plt.ylabel('Número de Atendimentos')
plt.grid(True)
plt.tight_layout()
plt.show()

"""6. Heatmap – Atendimentos por Especialidade e Dia da Semana
Mapa de calor que exibe o volume de atendimentos para cada especialidade ao longo da semana. Células mais escuras indicam maior volume de consultas, permitindo visualizar padrões semanais de agendamento.
"""

top10_esp = df['Especialidade'].value_counts().head(10).index
pivot_top10 = df[df['Especialidade'].isin(top10_esp)].pivot_table(
    index='Especialidade', columns='Dia_Semana', aggfunc='size', fill_value=0
)

plt.figure(figsize=(8, 8))  # aumenta altura
sns.heatmap(
    pivot_top10,
    cmap='YlGnBu',
    annot=True,
    fmt='d',
    annot_kws={"size": 7},      # reduz tamanho do texto
    cbar_kws={'shrink': 0.6}    # barra de cores menor
)
plt.title('Volume de Atendimentos por Especialidade e Dia da Semana')
plt.xlabel('Dia da Semana')
plt.ylabel('Especialidade')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()